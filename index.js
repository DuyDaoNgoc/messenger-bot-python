require("dotenv").config();
const fs = require("fs");
const login = require("fca-unofficial-fixed");
const { exec, execSync } = require("child_process");
const http = require("http");

const currentPort = parseInt(process.env.PORT) || 3000;

console.log("üìÇ ƒêang ki·ªÉm tra appstate.json...");

function checkAppStateAlive(callback) {
  const appState = JSON.parse(fs.readFileSync("appstate.json", "utf8"));
  login({ appState }, (err, api) => {
    if (err) {
      console.error("‚ùå appstate.json l·ªói:", err.error || err);
      return callback(false);
    }
    console.log("‚úÖ appstate c√≤n ho·∫°t ƒë·ªông!");
    callback(true);
  });
}

function startLogin() {
  if (fs.existsSync("appstate.json")) {
    console.log("üìÇ ƒêang s·ª≠ d·ª•ng cookie t·ª´ appstate.json");
    checkAppStateAlive((alive) => {
      if (!alive) {
        console.error("‚ö†Ô∏è Bot b·ªã ƒëƒÉng xu·∫•t ho·∫∑c appstate sai.");
        process.exit(1);
      }
      const appState = JSON.parse(fs.readFileSync("appstate.json", "utf8"));
      loginWithAutoUpdate({ appState });
    });
  } else {
    const email = process.env.FB_EMAIL;
    const password = process.env.FB_PASS;

    if (!email || !password) {
      console.error("‚ùå Thi·∫øu FB_EMAIL ho·∫∑c FB_PASS trong file .env");
      return;
    }

    console.log("üì© ƒêang ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n...");
    loginWithAutoUpdate({ email, password, forceLogin: true });
  }
}

function loginWithAutoUpdate(loginData) {
  console.log("üöÄ ƒêang th·ª±c hi·ªán ƒëƒÉng nh·∫≠p...");

  login(loginData, async (err, api) => {
    if (err) {
      console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
      return;
    }

    const pkgPath = "./node_modules/@dongdev/fca-unofficial/package.json";
    if (fs.existsSync(pkgPath)) {
      exec(
        "npm view @dongdev/fca-unofficial version",
        async (error, stdout) => {
          if (error) {
            console.warn("‚ö†Ô∏è Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c phi√™n b·∫£n:", error);
            return startBot(api);
          }

          const latest = stdout.trim();
          try {
            const current = JSON.parse(fs.readFileSync(pkgPath)).version;
            if (current !== latest) {
              console.warn(`‚ö†Ô∏è C√≥ b·∫£n m·ªõi: ${current} ‚Üí ${latest}`);
              console.warn("üîÅ ƒêang c·∫≠p nh·∫≠t...");
              try {
                execSync("npm install @dongdev/fca-unofficial@latest", {
                  stdio: "inherit",
                });
                console.log("‚úÖ C·∫≠p nh·∫≠t xong. ƒêang kh·ªüi ƒë·ªông l·∫°i...");
                await new Promise((r) => setTimeout(r, 5000));
                process.exit(1);
              } catch (e) {
                console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", e);
                startBot(api);
              }
            } else {
              console.log(`üì¶ ƒêang d√πng phi√™n b·∫£n m·ªõi nh·∫•t: ${current}`);
              startBot(api);
            }
          } catch (e) {
            console.warn("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c package.json:", e.message);
            startBot(api);
          }
        }
      );
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package.json.");
      startBot(api);
    }
  });
}

function startBot(api) {
  api.setOptions({
    listenEvents: true,
    selfListen: false,
    logLevel: "silent",
    forceLogin: false,
    updatePresence: false,
  });

  api.getCurrentUserID((err, id) => {
    if (err) return console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c ID:", err);

    api.getUserInfo(id, (err2, info) => {
      if (err2 || !info || !info[id]) {
        console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng.");
        return;
      }

      const name = info[id].name || "Kh√¥ng r√µ";
      console.log(`ü§ñ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: ${name} (ID: ${id})`);
      api.sendMessage(`‚úÖ Bot "${name}" ƒë√£ s·∫µn s√†ng v√† ho·∫°t ƒë·ªông.`, id);
    });
  });

  api.listenMqtt((err, message) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫Øng nghe:", err);
      return;
    }

    if (!message?.body) return;
    const msg = message.body.trim();
    const senderID = message.threadID;

    console.log(`üì© Tin nh·∫Øn t·ª´ ${senderID}: ${msg}`);
    api.sendTypingIndicator(senderID, true);

    const payload = {
      message: msg,
      senderID: senderID,
      timestamp: message.timestamp,
    };

    exec(`python logic.py '${JSON.stringify(payload)}'`, (error, stdout) => {
      api.sendTypingIndicator(senderID, false);

      if (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω logic.py:", error);
        api.sendMessage("‚ö†Ô∏è L·ªói x·ª≠ l√Ω y√™u c·∫ßu.", senderID);
        return;
      }

      const reply = stdout.trim();
      if (reply) {
        api.sendMessage(reply, senderID);
        console.log("üì§ Bot tr·∫£ l·ªùi:", reply);
      } else {
        console.log("‚ö†Ô∏è logic.py kh√¥ng tr·∫£ v·ªÅ n·ªôi dung.");
      }
    });
  });

  console.log("‚úÖ Bot ƒëang ch·∫°y v√† l·∫Øng nghe tin nh·∫Øn...");
}

function startServer(port) {
  const server = http.createServer((_, res) => res.end("‚úÖ Bot ƒëang ch·∫°y..."));

  server.listen(port, () => {
    console.log(`üåê Server t·∫°i http://localhost:${port}`);
  });

  server.on("error", (err) => {
    if (err.code === "EADDRINUSE") {
      console.warn(`‚ö†Ô∏è C·ªïng ${port} b·ªã chi·∫øm. Th·ª≠ c·ªïng ${port + 1}...`);
      startServer(port + 1);
    } else {
      console.error("‚ùå L·ªói server:", err);
    }
  });
}

startLogin();
startServer(currentPort);
